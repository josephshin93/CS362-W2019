Running All Unit Tests...


Running unit test 1:
================================= UNIT TEST 1 ==================================
target function: int buyCard(int supplyPos, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT 
supplyCount:     CORRECT 
embargoTokens:   CORRECT 
outpostPlayed:   CORRECT 
outpostTurn:     CORRECT 
whoseTurn:       CORRECT 
phase:           CORRECT 
numActions:      CORRECT 
coins:           CORRECT 
numBuys:         CORRECT 
hand:            CORRECT 
handCount:       CORRECT 
deck:            CORRECT 
deckCount:       CORRECT 
discard:         CORRECT 
discardCount:    CORRECT 
playedCards:     CORRECT 
playedCardCount: CORRECT 
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     WRONG   
                 [0] -> expected(9) < resulting(10)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(29) = resulting(29)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(1) = resulting(1)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(1) = resulting(1)
phase:           CORRECT expected(1) = resulting(1)
numActions:      CORRECT expected(0) = resulting(0)
coins:           CORRECT expected(0) = resulting(0)
numBuys:         CORRECT expected(0) = resulting(0)
hand:            CORRECT 
                 [0][0] -> expected(0) = resulting(0)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
handCount:       CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            CORRECT 
                 [0][0] -> expected(0) = resulting(0)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
deckCount:       CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         CORRECT 
                 [0][0] -> expected(0) = resulting(0)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(6) = resulting(6)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(2) > resulting(1)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(0) = resulting(0)
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:3.45% of 638
dominion.c:creating 'dominion.c.gcov'



Running unit test 2:
================================= UNIT TEST 2 ==================================
target function: int endTurn(struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(1) = resulting(1)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(1) = resulting(1)
coins:           WRONG   expected(0) < resulting(4)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(4) > resulting(-1)
                 [0][1] -> expected(5) > resulting(-1)
                 [0][2] -> expected(1) > resulting(0)
                 [0][3] -> expected(5) > resulting(0)
                 [0][4] -> expected(4) > resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) = resulting(4)
                 [1][1] -> expected(4) < resulting(5)
                 [1][2] -> expected(4) = resulting(4)
                 [1][3] -> expected(4) > resulting(1)
                 [1][4] -> expected(1) = resulting(1)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(5) > resulting(0)
                 [1] -> expected(5) > resulting(4)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(4) = resulting(4)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(5) = resulting(5)
                 [0][4] -> expected(4) = resulting(4)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) < resulting(1)
                 [1][1] -> expected(0) < resulting(4)
                 [1][2] -> expected(0) < resulting(5)
                 [1][3] -> expected(0) < resulting(4)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(0) < resulting(5)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(5) = resulting(5)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(4) > resulting(1)
                 [0][3] -> expected(4) > resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(1) > resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) > resulting(-1)
                 [1][1] -> expected(4) > resulting(-1)
                 [1][2] -> expected(5) > resulting(-1)
                 [1][3] -> expected(1) > resulting(-1)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(6) > resulting(3)
                 [1] -> expected(4) > resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(4) = resulting(4)
                 [1] -> expected(4) = resulting(4)
                 [2] -> expected(4) = resulting(4)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(0) = resulting(0)
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
outpostPlayed:   WRONG   expected(1) > resulting(0)
outpostTurn:     WRONG   expected(1) > resulting(0)
whoseTurn:       WRONG   expected(0) < resulting(1)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(1) = resulting(1)
coins:           WRONG   expected(0) < resulting(4)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(4) > resulting(-1)
                 [0][1] -> expected(5) > resulting(0)
                 [0][2] -> expected(1) > resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) = resulting(4)
                 [1][1] -> expected(4) = resulting(4)
                 [1][2] -> expected(4) > resulting(1)
                 [1][3] -> expected(4) < resulting(5)
                 [1][4] -> expected(1) = resulting(1)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(3) > resulting(0)
                 [1] -> expected(5) > resulting(4)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(4) = resulting(4)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(5) = resulting(5)
                 [0][4] -> expected(4) = resulting(4)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) < resulting(5)
                 [1][1] -> expected(0) < resulting(1)
                 [1][2] -> expected(0) < resulting(4)
                 [1][3] -> expected(0) < resulting(4)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
deckCount:       CORRECT 
                 [0] -> expected(5) = resulting(5)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(5) = resulting(5)
                 [0][1] -> expected(23) > resulting(1)
                 [0][2] -> expected(4) > resulting(0)
                 [0][3] -> expected(4) > resulting(0)
                 [0][4] -> expected(4) > resulting(0)
                 [0][5] -> expected(1) > resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) > resulting(-1)
                 [1][1] -> expected(4) > resulting(-1)
                 [1][2] -> expected(5) > resulting(-1)
                 [1][3] -> expected(1) > resulting(-1)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(6) > resulting(2)
                 [1] -> expected(4) > resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(4) = resulting(4)
                 [1] -> expected(4) = resulting(4)
                 [2] -> expected(4) = resulting(4)
                 [3] -> expected(23) = resulting(23)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(0) = resulting(0)
--------------------------------------------------------------------------------
---------------------------------- Scenario C ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(1) = resulting(1)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(1) = resulting(1)
coins:           WRONG   expected(0) < resulting(4)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(5) > resulting(-1)
                 [0][1] -> expected(1) > resulting(-1)
                 [0][2] -> expected(5) > resulting(0)
                 [0][3] -> expected(4) > resulting(0)
                 [0][4] -> expected(4) > resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) = resulting(4)
                 [1][1] -> expected(4) > resulting(1)
                 [1][2] -> expected(4) = resulting(4)
                 [1][3] -> expected(4) < resulting(5)
                 [1][4] -> expected(1) = resulting(1)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(5) > resulting(0)
                 [1] -> expected(5) > resulting(4)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(5) > resulting(4)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(4) > resulting(1)
                 [0][3] -> expected(4) < resulting(5)
                 [0][4] -> expected(1) > resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) < resulting(5)
                 [1][1] -> expected(0) < resulting(4)
                 [1][2] -> expected(0) < resulting(1)
                 [1][3] -> expected(0) < resulting(4)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(5) > resulting(4)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(5) = resulting(5)
                 [0][1] -> expected(0) < resulting(4)
                 [0][2] -> expected(0) < resulting(1)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [0][8] -> expected(0) = resulting(0)
                 [0][9] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) > resulting(-1)
                 [1][1] -> expected(4) > resulting(-1)
                 [1][2] -> expected(5) > resulting(-1)
                 [1][3] -> expected(1) > resulting(-1)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [1][8] -> expected(0) = resulting(0)
                 [1][9] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [2][8] -> expected(0) = resulting(0)
                 [2][9] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
                 [3][8] -> expected(0) = resulting(0)
                 [3][9] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(0) < resulting(3)
                 [1] -> expected(4) > resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(4) = resulting(4)
                 [1] -> expected(4) = resulting(4)
                 [2] -> expected(4) = resulting(4)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
                 [8] -> expected(0) = resulting(0)
                 [9] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(0) = resulting(0)
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:16.30% of 638
dominion.c:creating 'dominion.c.gcov'



Running unit test 3:
================================= UNIT TEST 3 ==================================
target function: int scoreFor(int player, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: WRONG   expected(9) > resulting(8)
Game State Comparison:
numPlayers:      CORRECT 
supplyCount:     CORRECT 
embargoTokens:   CORRECT 
outpostPlayed:   CORRECT 
outpostTurn:     CORRECT 
whoseTurn:       CORRECT 
phase:           CORRECT 
numActions:      CORRECT 
coins:           CORRECT 
numBuys:         CORRECT 
hand:            CORRECT 
handCount:       CORRECT 
deck:            CORRECT 
deckCount:       CORRECT 
discard:         CORRECT 
discardCount:    CORRECT 
playedCards:     CORRECT 
playedCardCount: CORRECT 
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: WRONG   expected(-9999) < resulting(0)
Game State Comparison:
numPlayers:      CORRECT 
supplyCount:     CORRECT 
embargoTokens:   CORRECT 
outpostPlayed:   CORRECT 
outpostTurn:     CORRECT 
whoseTurn:       CORRECT 
phase:           CORRECT 
numActions:      CORRECT 
coins:           CORRECT 
numBuys:         CORRECT 
hand:            CORRECT 
handCount:       CORRECT 
deck:            CORRECT 
deckCount:       CORRECT 
discard:         CORRECT 
discardCount:    CORRECT 
playedCards:     CORRECT 
playedCardCount: CORRECT 
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:20.38% of 638
dominion.c:creating 'dominion.c.gcov'



Running unit test 4:
================================= UNIT TEST 4 ==================================
target function: int fullDeckCount(int player, int card, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT 
supplyCount:     CORRECT 
embargoTokens:   CORRECT 
outpostPlayed:   CORRECT 
outpostTurn:     CORRECT 
whoseTurn:       CORRECT 
phase:           CORRECT 
numActions:      CORRECT 
coins:           CORRECT 
numBuys:         CORRECT 
hand:            CORRECT 
handCount:       CORRECT 
deck:            CORRECT 
deckCount:       CORRECT 
discard:         CORRECT 
discardCount:    CORRECT 
playedCards:     CORRECT 
playedCardCount: CORRECT 
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: WRONG   expected(-1) < resulting(0)
Game State Comparison:
numPlayers:      CORRECT 
supplyCount:     CORRECT 
embargoTokens:   CORRECT 
outpostPlayed:   CORRECT 
outpostTurn:     CORRECT 
whoseTurn:       CORRECT 
phase:           CORRECT 
numActions:      CORRECT 
coins:           CORRECT 
numBuys:         CORRECT 
hand:            CORRECT 
handCount:       CORRECT 
deck:            CORRECT 
deckCount:       CORRECT 
discard:         CORRECT 
discardCount:    CORRECT 
playedCards:     CORRECT 
playedCardCount: CORRECT 
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:22.10% of 638
dominion.c:creating 'dominion.c.gcov'



Running card test 1:
================================= CARD TEST 1 ==================================
target card:     Adventurer
target function: int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(0) = resulting(0)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(0) = resulting(0)
coins:           WRONG   expected(8) > resulting(5)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(7) = resulting(7)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(4) = resulting(4)
                 [0][4] -> expected(5) = resulting(5)
                 [0][5] -> expected(4) = resulting(4)
                 [0][6] -> expected(6) > resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(7) > resulting(6)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(4) = resulting(4)
                 [0][1] -> expected(-1) < resulting(6)
                 [0][2] -> expected(-1) < resulting(1)
                 [0][3] -> expected(-1) < resulting(13)
                 [0][4] -> expected(-1) < resulting(4)
                 [0][5] -> expected(-1) < resulting(1)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(1) < resulting(4)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(4) = resulting(4)
                 [0][1] -> expected(1) = resulting(1)
                 [0][2] -> expected(13) > resulting(0)
                 [0][3] -> expected(1) > resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(4) > resulting(2)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     WRONG   
                 [0] -> expected(7) > resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
playedCardCount: WRONG   expected(1) > resulting(0)
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(0) = resulting(0)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(0) = resulting(0)
coins:           WRONG   expected(8) > resulting(5)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(7) = resulting(7)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(4) = resulting(4)
                 [0][4] -> expected(5) = resulting(5)
                 [0][5] -> expected(4) = resulting(4)
                 [0][6] -> expected(6) > resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(7) > resulting(6)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(6) > resulting(2)
                 [0][1] -> expected(-1) < resulting(0)
                 [0][2] -> expected(-1) < resulting(1)
                 [0][3] -> expected(-1) < resulting(13)
                 [0][4] -> expected(-1) < resulting(4)
                 [0][5] -> expected(-1) < resulting(1)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(1) < resulting(4)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(-1) < resulting(6)
                 [0][1] -> expected(-1) < resulting(6)
                 [0][2] -> expected(0) < resulting(1)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(0) < resulting(3)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     WRONG   
                 [0] -> expected(7) > resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
playedCardCount: WRONG   expected(1) > resulting(0)
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:27.43% of 638
dominion.c:creating 'dominion.c.gcov'



Running card test 2:
================================= CARD TEST 2 ==================================
target card:     Smithy
target function: int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(0) = resulting(0)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(0) = resulting(0)
coins:           CORRECT expected(6) = resulting(6)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(13) > resulting(2)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(6) = resulting(6)
                 [0][4] -> expected(7) = resulting(7)
                 [0][5] -> expected(5) = resulting(5)
                 [0][6] -> expected(7) = resulting(7)
                 [0][7] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(7) < resulting(8)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(2) = resulting(2)
                 [0][1] -> expected(-1) < resulting(0)
                 [0][2] -> expected(-1) < resulting(7)
                 [0][3] -> expected(-1) < resulting(5)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(1) > resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         CORRECT 
                 [0][0] -> expected(1) = resulting(1)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
discardCount:    CORRECT 
                 [0] -> expected(1) = resulting(1)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(13) = resulting(13)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(1) = resulting(1)
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(2) = resulting(2)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(0) = resulting(0)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(0) = resulting(0)
coins:           CORRECT expected(6) = resulting(6)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(13) > resulting(1)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(6) = resulting(6)
                 [0][4] -> expected(7) = resulting(7)
                 [0][5] -> expected(5) = resulting(5)
                 [0][6] -> expected(7) > resulting(2)
                 [0][7] -> expected(1) = resulting(1)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(7) < resulting(8)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(1) = resulting(1)
                 [0][1] -> expected(-1) < resulting(1)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(1) > resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
discard:         CORRECT 
                 [0][0] -> expected(-1) = resulting(-1)
                 [0][1] -> expected(-1) = resulting(-1)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [0][6] -> expected(0) = resulting(0)
                 [0][7] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [1][6] -> expected(0) = resulting(0)
                 [1][7] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [2][6] -> expected(0) = resulting(0)
                 [2][7] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
                 [3][6] -> expected(0) = resulting(0)
                 [3][7] -> expected(0) = resulting(0)
discardCount:    CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(13) = resulting(13)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
                 [6] -> expected(0) = resulting(0)
                 [7] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(1) = resulting(1)
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:30.09% of 638
dominion.c:creating 'dominion.c.gcov'



Running card test 3:
================================= CARD TEST 3 ==================================
target card:     Minion
target function: int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(3) = resulting(3)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(1) = resulting(1)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(1) = resulting(1)
coins:           WRONG   expected(4) > resulting(2)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            CORRECT 
                 [0][0] -> expected(1) = resulting(1)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(13) = resulting(13)
                 [0][4] -> expected(5) = resulting(5)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(13) = resulting(13)
                 [1][1] -> expected(4) = resulting(4)
                 [1][2] -> expected(4) = resulting(4)
                 [1][3] -> expected(1) = resulting(1)
                 [1][4] -> expected(-1) = resulting(-1)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(1) = resulting(1)
                 [2][1] -> expected(4) = resulting(4)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
handCount:       CORRECT 
                 [0] -> expected(5) = resulting(5)
                 [1] -> expected(4) = resulting(4)
                 [2] -> expected(2) = resulting(2)
                 [3] -> expected(0) = resulting(0)
deck:            CORRECT 
                 [0][0] -> expected(4) = resulting(4)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(2) = resulting(2)
                 [0][3] -> expected(3) = resulting(3)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(5) = resulting(5)
                 [1][1] -> expected(4) = resulting(4)
                 [1][2] -> expected(4) = resulting(4)
                 [1][3] -> expected(1) = resulting(1)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(4) = resulting(4)
                 [2][1] -> expected(5) = resulting(5)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
deckCount:       CORRECT 
                 [0] -> expected(4) = resulting(4)
                 [1] -> expected(4) = resulting(4)
                 [2] -> expected(2) = resulting(2)
                 [3] -> expected(0) = resulting(0)
discard:         CORRECT 
                 [0][0] -> expected(6) = resulting(6)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(6) = resulting(6)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(6) = resulting(6)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
discardCount:    CORRECT 
                 [0] -> expected(1) = resulting(1)
                 [1] -> expected(1) = resulting(1)
                 [2] -> expected(1) = resulting(1)
                 [3] -> expected(0) = resulting(0)
playedCards:     CORRECT 
                 [0] -> expected(17) = resulting(17)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
playedCardCount: CORRECT expected(1) = resulting(1)
--------------------------------------------------------------------------------
---------------------------------- Scenario B ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(3) = resulting(3)
supplyCount:     CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(1) = resulting(1)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(1) = resulting(1)
coins:           CORRECT expected(4) = resulting(4)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            CORRECT 
                 [0][0] -> expected(3) = resulting(3)
                 [0][1] -> expected(2) = resulting(2)
                 [0][2] -> expected(4) = resulting(4)
                 [0][3] -> expected(4) = resulting(4)
                 [0][4] -> expected(-1) = resulting(-1)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(1) = resulting(1)
                 [1][1] -> expected(4) = resulting(4)
                 [1][2] -> expected(4) = resulting(4)
                 [1][3] -> expected(5) = resulting(5)
                 [1][4] -> expected(-1) = resulting(-1)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(1) = resulting(1)
                 [2][1] -> expected(4) = resulting(4)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
handCount:       CORRECT 
                 [0] -> expected(4) = resulting(4)
                 [1] -> expected(4) = resulting(4)
                 [2] -> expected(2) = resulting(2)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(-1) < resulting(4)
                 [0][1] -> expected(-1) < resulting(4)
                 [0][2] -> expected(-1) < resulting(2)
                 [0][3] -> expected(-1) < resulting(3)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(-1) < resulting(5)
                 [1][1] -> expected(-1) < resulting(4)
                 [1][2] -> expected(-1) < resulting(4)
                 [1][3] -> expected(-1) < resulting(1)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(4) = resulting(4)
                 [2][1] -> expected(5) = resulting(5)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
deckCount:       CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(2) = resulting(2)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(6) = resulting(6)
                 [0][1] -> expected(1) > resulting(0)
                 [0][2] -> expected(4) > resulting(0)
                 [0][3] -> expected(1) > resulting(0)
                 [0][4] -> expected(13) > resulting(0)
                 [0][5] -> expected(5) > resulting(0)
                 [1][0] -> expected(6) = resulting(6)
                 [1][1] -> expected(4) > resulting(0)
                 [1][2] -> expected(4) > resulting(0)
                 [1][3] -> expected(1) > resulting(0)
                 [1][4] -> expected(13) > resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(6) = resulting(6)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
discardCount:    WRONG   
                 [0] -> expected(6) > resulting(1)
                 [1] -> expected(5) > resulting(1)
                 [2] -> expected(1) = resulting(1)
                 [3] -> expected(0) = resulting(0)
playedCards:     WRONG   
                 [0] -> expected(17) = resulting(17)
                 [1] -> expected(0) < resulting(13)
                 [2] -> expected(0) < resulting(1)
                 [3] -> expected(0) < resulting(4)
                 [4] -> expected(0) < resulting(4)
                 [5] -> expected(0) < resulting(1)
playedCardCount: WRONG   expected(1) < resulting(10)
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:34.33% of 638
dominion.c:creating 'dominion.c.gcov'



Running card test 4:
================================= CARD TEST 4 ==================================
target card:     Sea Hag
target function: int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
---------------------------------- Scenario A ----------------------------------
Return Value: CORRECT
Game State Comparison:
numPlayers:      CORRECT expected(3) = resulting(3)
supplyCount:     WRONG   
                 [0] -> expected(0) < resulting(1)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
embargoTokens:   CORRECT 
                 [0] -> expected(0) = resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
outpostPlayed:   CORRECT expected(0) = resulting(0)
outpostTurn:     CORRECT expected(0) = resulting(0)
whoseTurn:       CORRECT expected(0) = resulting(0)
phase:           CORRECT expected(0) = resulting(0)
numActions:      CORRECT expected(0) = resulting(0)
coins:           CORRECT expected(2) = resulting(2)
numBuys:         CORRECT expected(1) = resulting(1)
hand:            WRONG   
                 [0][0] -> expected(13) < resulting(25)
                 [0][1] -> expected(4) = resulting(4)
                 [0][2] -> expected(1) = resulting(1)
                 [0][3] -> expected(4) = resulting(4)
                 [0][4] -> expected(-1) < resulting(13)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) = resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(0) = resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
handCount:       WRONG   
                 [0] -> expected(4) < resulting(5)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
deck:            WRONG   
                 [0][0] -> expected(5) = resulting(5)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(0) < resulting(4)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(-1) < resulting(3)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
deckCount:       WRONG   
                 [0] -> expected(1) = resulting(1)
                 [1] -> expected(1) > resulting(-2)
                 [2] -> expected(0) > resulting(-2)
                 [3] -> expected(0) = resulting(0)
discard:         WRONG   
                 [0][0] -> expected(6) = resulting(6)
                 [0][1] -> expected(0) = resulting(0)
                 [0][2] -> expected(0) = resulting(0)
                 [0][3] -> expected(0) = resulting(0)
                 [0][4] -> expected(0) = resulting(0)
                 [0][5] -> expected(0) = resulting(0)
                 [1][0] -> expected(4) > resulting(0)
                 [1][1] -> expected(0) = resulting(0)
                 [1][2] -> expected(0) = resulting(0)
                 [1][3] -> expected(0) = resulting(0)
                 [1][4] -> expected(0) = resulting(0)
                 [1][5] -> expected(0) = resulting(0)
                 [2][0] -> expected(3) > resulting(0)
                 [2][1] -> expected(0) = resulting(0)
                 [2][2] -> expected(0) = resulting(0)
                 [2][3] -> expected(0) = resulting(0)
                 [2][4] -> expected(0) = resulting(0)
                 [2][5] -> expected(0) = resulting(0)
                 [3][0] -> expected(0) = resulting(0)
                 [3][1] -> expected(0) = resulting(0)
                 [3][2] -> expected(0) = resulting(0)
                 [3][3] -> expected(0) = resulting(0)
                 [3][4] -> expected(0) = resulting(0)
                 [3][5] -> expected(0) = resulting(0)
discardCount:    CORRECT 
                 [0] -> expected(1) = resulting(1)
                 [1] -> expected(1) = resulting(1)
                 [2] -> expected(1) = resulting(1)
                 [3] -> expected(0) = resulting(0)
playedCards:     WRONG   
                 [0] -> expected(25) > resulting(0)
                 [1] -> expected(0) = resulting(0)
                 [2] -> expected(0) = resulting(0)
                 [3] -> expected(0) = resulting(0)
                 [4] -> expected(0) = resulting(0)
                 [5] -> expected(0) = resulting(0)
playedCardCount: WRONG   expected(1) > resulting(0)
--------------------------------------------------------------------------------
================================================================================
File 'dominion.c'
Lines executed:35.89% of 638
dominion.c:creating 'dominion.c.gcov'

\n\nRunning unit test 1:
