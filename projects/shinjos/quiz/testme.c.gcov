        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function randInt called 1985 returned 100% blocks executed 100%
        -:    6:int randInt(int lowerLimit, int upperLimit) {
     1985:    7:  return (rand() % (upperLimit - lowerLimit + 1)) + lowerLimit;
        -:    8:}
        -:    9:
function fyShuffle called 397 returned 100% blocks executed 100%
        -:   10:void fyShuffle(int *arr, int len) {
        -:   11:  int i, j, temp;
     3970:   12:  for (i = 0; i < len-1; i++) {
branch  0 taken 80%
branch  1 taken 20%
     1588:   13:    j = randInt(i, len-1);
     1588:   14:    temp = arr[i];
     1588:   15:    arr[i] = arr[j];
     1588:   16:    arr[j] = temp;
     1588:   17:  }
      397:   18:}
        -:   19:
function inputChar called 397 returned 100% blocks executed 100%
        -:   20:char inputChar()
        -:   21:{
      397:   22:    char *choices = "[({ ax})]";
      397:   23:    int index = randInt(0, strlen(choices)-1);
        -:   24:    // printf("index = %d\n", index);
      397:   25:    return choices[index];
        -:   26:}
        -:   27:
function inputString called 397 returned 100% blocks executed 100%
        -:   28:char *inputString()
        -:   29:{
        -:   30:    int i;
      397:   31:    char *word = "reset";
      397:   32:    int len = strlen(word);
        -:   33:
      397:   34:    int *indices = malloc(sizeof(int) * len);
     6749:   35:    for (i = 0; i < len; i++) indices[i] = i;
branch  0 taken 83%
branch  1 taken 17%
        -:   36:
      397:   37:    char *shuffledWord = malloc(sizeof(char) * len+1);
      397:   38:    memset(shuffledWord, 0, len+1);
        -:   39:
      397:   40:    fyShuffle(indices, len);
        -:   41:
     6749:   42:    for (i = 0; i < len; i++) shuffledWord[i] = word[indices[i]];
branch  0 taken 83%
branch  1 taken 17%
        -:   43:    // printf("shuffled word = \"%s\"\n", shuffledWord);
        -:   44:
      397:   45:    free(indices);
        -:   46:    
      397:   47:    return shuffledWord;
        -:   48:}
        -:   49:
function testme called 3 returned 0% blocks executed 94%
        -:   50:void testme()
        -:   51:{
        3:   52:  int tcCount = 0;
        -:   53:  char *s;
        -:   54:  char c;
        3:   55:  int state = 0;
      397:   56:  while (1)
        -:   57:  {
      397:   58:    tcCount++;
      397:   59:    c = inputChar();
      397:   60:    s = inputString();
      397:   61:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
        -:   62:
      443:   63:    if (c == '[' && state == 0) state = 1;
branch  0 taken 11%
branch  1 taken 89%
branch  2 taken 7%
branch  3 taken 93%
      440:   64:    if (c == '(' && state == 1) state = 2;
branch  0 taken 10%
branch  1 taken 90%
branch  2 taken 8%
branch  3 taken 93%
      443:   65:    if (c == '{' && state == 2) state = 3;
branch  0 taken 11%
branch  1 taken 89%
branch  2 taken 7%
branch  3 taken 93%
      438:   66:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 10%
branch  1 taken 90%
branch  2 taken 8%
branch  3 taken 92%
      446:   67:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 12%
branch  1 taken 88%
branch  2 taken 7%
branch  3 taken 93%
      444:   68:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 11%
branch  1 taken 89%
branch  2 taken 7%
branch  3 taken 93%
      450:   69:    if (c == '}' && state == 6) state = 7;
branch  0 taken 13%
branch  1 taken 87%
branch  2 taken 6%
branch  3 taken 94%
      453:   70:    if (c == ')' && state == 7) state = 8;
branch  0 taken 13%
branch  1 taken 87%
branch  2 taken 6%
branch  3 taken 94%
      440:   71:    if (c == ']' && state == 8) state = 9;
branch  0 taken 10%
branch  1 taken 90%
branch  2 taken 8%
branch  3 taken 93%
      489:   72:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 22%
branch  1 taken 78%
branch  2 taken 50%
branch  3 taken 50%
      136:   73:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 44%
branch  1 taken 56%
branch  2 taken 32%
branch  3 taken 68%
       24:   74:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0%
       12:   75:       && state == 9)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        3:   77:      printf("error ");
        3:   78:      exit(200);
        -:   79:    }
        -:   80:
      394:   81:    free(s);
        -:   82:  }
    #####:   83:}
        -:   84:
        -:   85:
function main called 3 returned 100% blocks executed 100%
        -:   86:int main(int argc, char *argv[])
        -:   87:{
        3:   88:    srand(time(NULL));
        3:   89:    testme();
        3:   90:    return 0;
        -:   91:}
